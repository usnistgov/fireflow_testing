tests = [
    (fr_id, s["name"]) for fr_id, specs in config["test_files"].items() for s in specs
]


rule test_read:
    input:
        "resources/fcs/{fr_id}/{testname}",
    output:
        flag="results/read_test/pass/{fr_id}/{testname}.txt",
        fcs="results/read_test/fcs/{fr_id}/{testname}",
    log:
        "results/log/read/warnings_{fr_id}_{testname}.log",
    conda:
        "envs/pyreflow.yml"
    script:
        "scripts/python/test_read.py"


rule test_double_parse:
    input:
        original="resources/fcs/{fr_id}/{testname}",
        std=rules.test_read.output.fcs,
    output:
        "results/double_parse/pass/{fr_id}/{testname}.txt",
    log:
        "results/log/double_parse/warnings_{fr_id}_{testname}.log",
    conda:
        "envs/pyreflow.yml"
    script:
        "scripts/python/test_double_parse.py"


rule write_report:
    input:
        expand(
            "resources/fcs/{fr_id}/{testname}",
            zip,
            fr_id=[x[0] for x in tests],
            testname=[x[1] for x in tests],
        ),
    output:
        machine_table="results/reports/machines.tsv",
    conda:
        "envs/pyreflow.yml"
    script:
        "scripts/python/make_report.py"


rule all:
    input:
        rules.write_report.output,
        expand(
            rules.test_double_parse.output,
            zip,
            fr_id=[x[0] for x in tests],
            testname=[x[1] for x in tests],
        ),
