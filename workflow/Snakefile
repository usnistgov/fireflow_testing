from pathlib import Path

tests = [
    (fr_id, s["name"]) for fr_id, specs in config["test_files"].items() for s in specs
]

tools_dir = Path("resources/tools")
aspera_base_dir = tools_dir / "immport-data-download-tool"


rule download_aspera:
    output:
        aspera_base_dir / "aspera" / "cli" / "etc" / "aspera-license",
    params:
        url="https://downloads.immport.org/data/download/tool/immport-data-download-tool.zip",
        dst=f"{aspera_base_dir}.zip",
    shell:
        """
        curl -SsqLf -o {params.dst} {params.url} && \
        unzip -q -o {params.dst} -d $(dirname {aspera_base_dir}) && \
        rm -f {params.dst}
        """


rule download_immport:
    input:
        aspera=rules.download_aspera.output[0],
        manifest="config/immport_fcs_manifest.txt",
    output:
        "resources/immport/downloaded.txt",
    log:
        "results/log/immport",
    conda:
        "envs/immport.yml"
    script:
        "scripts/python/download_immport.py"


rule test_read:
    input:
        "resources/fcs/{fr_id}/{testname}",
    output:
        flag="results/read_test/pass/{fr_id}/{testname}.txt",
        fcs="results/read_test/fcs/{fr_id}/{testname}",
    log:
        "results/log/read/warnings_{fr_id}_{testname}.log",
    conda:
        "envs/pyreflow.yml"
    script:
        "scripts/python/test_read.py"


rule test_double_parse:
    input:
        original="resources/fcs/{fr_id}/{testname}",
        std=rules.test_read.output.fcs,
    output:
        "results/double_parse/pass/{fr_id}/{testname}.txt",
    log:
        "results/log/double_parse/warnings_{fr_id}_{testname}.log",
    conda:
        "envs/pyreflow.yml"
    script:
        "scripts/python/test_double_parse.py"


rule write_report:
    input:
        expand(
            "resources/fcs/{fr_id}/{testname}",
            zip,
            fr_id=[x[0] for x in tests],
            testname=[x[1] for x in tests],
        ),
    output:
        machine_table="results/reports/machines.tsv",
    conda:
        "envs/pyreflow.yml"
    script:
        "scripts/python/make_report.py"


rule all:
    input:
        rules.download_immport.output,
        # rules.write_report.output,
        # expand(
        #     rules.test_double_parse.output,
        #     zip,
        #     fr_id=[x[0] for x in tests],
        #     testname=[x[1] for x in tests],
        # ),
